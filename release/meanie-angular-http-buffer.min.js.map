{"version":3,"sources":["httpBuffer.service.js","meanie-angular-http-buffer.min.js"],"names":["window","angular","undefined","module","factory","$q","$injector","retryHttpRequest","config","deferred","$http","get","then","response","resolve","reason","reject","buffer","store","defer","push","promise","clear","rejectAll","i","length","this","retryAll","configUpdater","isFunction"],"mappings":"CAOA,SAAAA,EAAAC,EAAAC,GAAA,YAKAD,GAAAE,OAAA,yBAKAC,QAAA,eAAA,KAAA,YAAA,SAAAC,EAAAC,GAWA,QAAAC,GAAAC,EAAAC,GAGAC,EAAAA,GAAAJ,EAAAK,IAAA,SAGAD,EAAAF,GAAAI,KAAA,SAAAC,GACAJ,EAAAK,QAAAD,IACA,SAAAE,GACAN,EAAAO,OAAAD,KAjBA,GAGAL,GAHAO,IAwBA,QAKAC,MAAA,SAAAV,GACA,GAAAC,GAAAJ,EAAAc,OAKA,OAJAF,GAAAG,MACAZ,OAAAA,EACAC,SAAAA,IAEAA,EAAAY,SAMAC,MAAA,WACAL,MAMAM,UAAA,SAAAR,GAGA,IAAA,GAAAS,GAAA,EAAAA,EAAAP,EAAAQ,OAAAD,IACAP,EAAAO,GAAAf,SAAAO,OAAAD,EAIAW,MAAAJ,SAMAK,SAAA,SAAAC,GAGA,IAAA,GAAAJ,GAAA,EAAAA,EAAAP,EAAAQ,OAAAD,IAGAI,GAAA3B,EAAA4B,WAAAD,KACAX,EAAAO,GAAAhB,OAAAoB,EAAAX,EAAAO,GAAAhB,SAIAD,EAAAU,EAAAO,GAAAhB,OAAAS,EAAAO,GAAAf,SCIMiB,MAAKJ,cAKRtB,OAAQA,OAAOC","file":"meanie-angular-http-buffer.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('HttpBuffer.Service', [])\n\n/**\n * Service definition\n */\n.factory('$httpBuffer', ['$q', '$injector', function($q, $injector) {\n\n  //Requests buffer\n  var buffer = [];\n\n  //HTTP service, initialized later due to circular dependency\n  var $http;\n\n  /**\n   * Helper to retry a http request\n   */\n  function retryHttpRequest(config, deferred) {\n\n    //Get the http service now\n    $http = $http || $injector.get('$http');\n\n    //Retry the request\n    $http(config).then(function(response) {\n      deferred.resolve(response);\n    }, function(reason) {\n      deferred.reject(reason);\n    });\n  }\n\n  /**\n   * Service class\n   */\n  return {\n\n    /**\n     * Store a new request in the buffer\n     */\n    store: function(config) {\n      var deferred = $q.defer();\n      buffer.push({\n        config: config,\n        deferred: deferred\n      });\n      return deferred.promise;\n    },\n\n    /**\n     * Clear the buffer (without rejecting requests)\n     */\n    clear: function() {\n      buffer = [];\n    },\n\n    /**\n     * Reject all the buffered requests\n     */\n    rejectAll: function(reason) {\n\n      //Loop all buffered requests and reject them\n      for (var i = 0; i < buffer.length; i++) {\n        buffer[i].deferred.reject(reason);\n      }\n\n      //Clear the buffer\n      this.clear();\n    },\n\n    /**\n     * Retry all buffered requests\n     */\n    retryAll: function(configUpdater) {\n\n      //Loop all buffered requests\n      for (var i = 0; i < buffer.length; i++) {\n\n        //Config updater provided? Use it\n        if (configUpdater && angular.isFunction(configUpdater)) {\n          buffer[i].config = configUpdater(buffer[i].config);\n        }\n\n        //Retry the request\n        retryHttpRequest(buffer[i].config, buffer[i].deferred);\n      }\n\n      //Clear the buffer\n      this.clear();\n    }\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-http-buffer - v1.0.0 - 23-9-2015\n * https://github.com/meanie/angular-http-buffer\n *\n * Copyright (c) 2015 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n!function(e,r,n){\"use strict\";r.module(\"HttpBuffer.Service\",[]).factory(\"$httpBuffer\",[\"$q\",\"$injector\",function(e,n){function t(e,r){c=c||n.get(\"$http\"),c(e).then(function(e){r.resolve(e)},function(e){r.reject(e)})}var c,f=[];return{store:function(r){var n=e.defer();return f.push({config:r,deferred:n}),n.promise},clear:function(){f=[]},rejectAll:function(e){for(var r=0;r<f.length;r++)f[r].deferred.reject(e);this.clear()},retryAll:function(e){for(var n=0;n<f.length;n++)e&&r.isFunction(e)&&(f[n].config=e(f[n].config)),t(f[n].config,f[n].deferred);this.clear()}}}])}(window,window.angular);\n//# sourceMappingURL=meanie-angular-http-buffer.min.js.map\n"],"sourceRoot":"/source/"}