{"version":3,"sources":["meanie-angular-http-buffer.min.js","httpBuffer.service.js"],"names":["window","angular","undefined","module","factory","$q","$injector","retryHttpRequest","config","deferred","$http","get","then","response","resolve","reason","reject","buffer","store","defer","push","promise","clear","rejectAll","i","length","this","retryAll","configUpdater","isFunction"],"mappings":"AAOA,cAEA,SCJQA,EAAOC,EAAAC,GDWbD,EAAQE,OAAO,yBAKdC,QAAQ,eAAgB,KAAM,YAAa,SAAUC,EAAIC,GAWxD,QCJEC,GAAiBC,EAAAC,GDOjBC,EAAQA,GAASJ,EAAUK,IAAI,SAG/BD,EAAMF,GAAQI,KAAK,SAAUC,GAC3BJ,EAASK,QAAQD,IAChB,SAAUE,GCHjBN,EAAOO,OAAAD,KDbL,GAGIL,GAHAO,IAwBJ,QAKEC,MAAO,SAAeV,GACpB,GAAIC,GAAWJ,EAAGc,OCCpB,ODAEF,GAAOG,MACLZ,OAAQA,EACRC,SAAUA,ICFdA,EAASY,SAMXC,MAAA,WDKIL,MAMFM,UAAW,SAAmBR,GAG5B,IAAK,GAAIS,GAAI,EAAGA,EAAIP,EAAOQ,OAAQD,IACjCP,EAAOO,GAAGf,SAASO,OAAOD,EAI5BW,MAAKJ,SAMPK,SCJI,SAAmBC,GDOrB,IAAK,GAAIJ,GAAI,EAAGA,EAAIP,EAAOQ,OAAQD,IAG7BI,GAAiB3B,EAAQ4B,WAAWD,KACtCX,EAAOO,GAAGhB,OAASoB,EAAcX,EAAOO,GAAGhB,SAI7CD,EAAiBU,EAAOO,GAAGhB,OAAQS,EAAOO,GAAGf,SAI/CiB,MAAKJ,cAIVtB,OAAQA,OAAOC","file":"meanie-angular-http-buffer.min.js","sourcesContent":["/**\n * meanie-angular-http-buffer - v1.1.2 - 18-6-2016\n * https://github.com/meanie/angular-http-buffer\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('HttpBuffer.Service', [])\n\n  /**\n   * Service definition\n   */\n  .factory('$httpBuffer', ['$q', '$injector', function ($q, $injector) {\n\n    //Requests buffer\n    var buffer = [];\n\n    //HTTP service, initialized later due to circular dependency\n    var $http;\n\n    /**\n     * Helper to retry a http request\n     */\n    function retryHttpRequest(config, deferred) {\n\n      //Get the http service now\n      $http = $http || $injector.get('$http');\n\n      //Retry the request\n      $http(config).then(function (response) {\n        deferred.resolve(response);\n      }, function (reason) {\n        deferred.reject(reason);\n      });\n    }\n\n    /**\n     * Service class\n     */\n    return {\n\n      /**\n       * Store a new request in the buffer\n       */\n      store: function store(config) {\n        var deferred = $q.defer();\n        buffer.push({\n          config: config,\n          deferred: deferred\n        });\n        return deferred.promise;\n      },\n\n      /**\n       * Clear the buffer (without rejecting requests)\n       */\n      clear: function clear() {\n        buffer = [];\n      },\n\n      /**\n       * Reject all the buffered requests\n       */\n      rejectAll: function rejectAll(reason) {\n\n        //Loop all buffered requests and reject them\n        for (var i = 0; i < buffer.length; i++) {\n          buffer[i].deferred.reject(reason);\n        }\n\n        //Clear the buffer\n        this.clear();\n      },\n\n      /**\n       * Retry all buffered requests\n       */\n      retryAll: function retryAll(configUpdater) {\n\n        //Loop all buffered requests\n        for (var i = 0; i < buffer.length; i++) {\n\n          //Config updater provided? Use it\n          if (configUpdater && angular.isFunction(configUpdater)) {\n            buffer[i].config = configUpdater(buffer[i].config);\n          }\n\n          //Retry the request\n          retryHttpRequest(buffer[i].config, buffer[i].deferred);\n        }\n\n        //Clear the buffer\n        this.clear();\n      }\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('HttpBuffer.Service', [])\n\n/**\n * Service definition\n */\n.factory('$httpBuffer', function($q, $injector) {\n\n  //Requests buffer\n  var buffer = [];\n\n  //HTTP service, initialized later due to circular dependency\n  var $http;\n\n  /**\n   * Helper to retry a http request\n   */\n  function retryHttpRequest(config, deferred) {\n\n    //Get the http service now\n    $http = $http || $injector.get('$http');\n\n    //Retry the request\n    $http(config).then(function(response) {\n      deferred.resolve(response);\n    }, function(reason) {\n      deferred.reject(reason);\n    });\n  }\n\n  /**\n   * Service class\n   */\n  return {\n\n    /**\n     * Store a new request in the buffer\n     */\n    store: function(config) {\n      var deferred = $q.defer();\n      buffer.push({\n        config: config,\n        deferred: deferred\n      });\n      return deferred.promise;\n    },\n\n    /**\n     * Clear the buffer (without rejecting requests)\n     */\n    clear: function() {\n      buffer = [];\n    },\n\n    /**\n     * Reject all the buffered requests\n     */\n    rejectAll: function(reason) {\n\n      //Loop all buffered requests and reject them\n      for (var i = 0; i < buffer.length; i++) {\n        buffer[i].deferred.reject(reason);\n      }\n\n      //Clear the buffer\n      this.clear();\n    },\n\n    /**\n     * Retry all buffered requests\n     */\n    retryAll: function(configUpdater) {\n\n      //Loop all buffered requests\n      for (var i = 0; i < buffer.length; i++) {\n\n        //Config updater provided? Use it\n        if (configUpdater && angular.isFunction(configUpdater)) {\n          buffer[i].config = configUpdater(buffer[i].config);\n        }\n\n        //Retry the request\n        retryHttpRequest(buffer[i].config, buffer[i].deferred);\n      }\n\n      //Clear the buffer\n      this.clear();\n    }\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}